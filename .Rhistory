test <- as.data.frame(damage_levels)
ggplot(test, aes(x = "", y = test$damage_levels)) + geom_boxplot()
ggplot(test, aes(x = "", y = test$damage_levels)) + geom_histogram()
ggplot(test, aes(x = "", y = damage_levels)) + geom_histogram()
ggplot(test, aes(x = damage_levels)) + geom_histogram()
mito_genes <- get("mouse_mito_genes", envir = asNamespace("damagesimulator"))
# Identify non-mitochondrial genes (these expression values will be altered)
mito_idx <- rownames(to_be_perturbed) %in% mito_genes
mito_idx
table(mito_idx)
mito_genes
mito_genes <- get("human_mito_genes", envir = asNamespace("damagesimulator"))
# Identify non-mitochondrial genes (these expression values will be altered)
mito_idx <- rownames(to_be_perturbed) %in% mito_genes
table(mito_idx)
non_mito_idx <- which(!mito_idx)
table(non_mito_idx)
length(non_mito_idx)
dim(data)
# Extract mitochondrial and non-mitochondrial expression separately
to_be_perturbed_non_mito <- to_be_perturbed[non_mito_idx, , drop = FALSE]
dim(to_be_perturbed_non_mito)
# Define a lambda constant for scaling the damage levels (adjustable value)
lambda <- damage_scale_factor  # Smaller lambda leads to less reduction
lambda
# Generate a single perturbation factor per cell based on damage level, adjusted with lambda
perturb_factors <- exp(-lambda * damage_levels)
df <- as.data.frame(perturb_factors)
ggplot(df, aes(x = perturb_factors)) + geom_histogram()
# Generate a single perturbation factor per cell based on damage level, adjusted with lambda
perturb_factors <- exp(-lambda * damage_levels)
dim(perturb_factors)
kength(perturb_factors)
length(perturb_factors)
# Expand perturb_factors to match non-mito gene matrix dimensions
perturb_factors_matrix <- matrix(rep(perturb_factors, each = nrow(to_be_perturbed_non_mito)),
nrow = nrow(to_be_perturbed_non_mito),
ncol = damaged_cell_number,
byrow = FALSE)
dim(perturb_factors_matrix)
perturb_factors_matrix
head(perturb_factors_matrix)
# Expand perturb_factors to match non-mito gene matrix dimensions
perturb_factors_matrix <- as.matrix(rep(perturb_factors, each = nrow(to_be_perturbed_non_mito)),
nrow = nrow(to_be_perturbed_non_mito),
ncol = damaged_cell_number,
byrow = FALSE)
head(perturb_factors_matrix)
# Apply the same reduction factor across all non-mito genes for each cell
perturbed_expression <- as.matrix(to_be_perturbed_non_mito) * perturb_factors_matrix
dim( perturb_factors_matrix)
head(to_be_perturbed_non_mito)
# Extract mitochondrial and non-mitochondrial expression separately
to_be_perturbed_non_mito <- to_be_perturbed[non_mito_idx, , drop = FALSE]
head(to_be_perturbed_mito)
data <-  perturb_factors
data
length(data)
class(data)
nrow(to_be_perturbed_non_mito)
perturb_factors_matrix <- matrix(perturb_factors,
nrow = nrow(to_be_perturbed_non_mito),
ncol = length(perturb_factors),
byrow = TRUE)
dim(perturb_factors_matrix)
head(perturb_factors_matrix)
perturb_factors_matrix[1,]
perturb_factors_matrix[,1]
# Apply the same reduction factor across all non-mito genes for each cell
perturbed_expression <- to_be_perturbed_non_mito * perturb_factors_matrix
dim(to_be_perturbed_non_mito)
dim(perturb_factors_matrix)
# No change to mitochondrial counts
perturbed_combined <- as.matrix(to_be_perturbed) # identical(colnames(perturbed_combined), damaged_cell_selections) # TRUE
perturbed_combined[non_mito_idx, ] <- perturbed_expression
# Step 4: Recombine with unperturbed data
combined_matrix <- cbind(perturbed_combined, as.matrix(unperturbed))
#combined_matrix <- combined_matrix[rownames(data), ]
combined_matrix <- as(combined_matrix, "dgCMatrix") # Essential for speed in view_output!
combined_seurat <- CreateSeuratObject(counts = combined_matrix, assay = "RNA")
# Adding metadata
combined_seurat$orig.ident <- ifelse(rownames(combined_seurat@meta.data) %in% damaged_cell_selections, "damaged", "cell")
if (organism == "human"){
# Mitochondrial percent
m_genes <- rownames(combined_seurat)[grep("^MT-", rownames(combined_seurat))]
combined_seurat$mt.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(m_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
# Ribosomal percent
rb_genes <- rownames(combined_seurat)[grep("^RP[SL]", rownames(combined_seurat))]
combined_seurat$rb.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(rb_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
}
# Call helper function to generate diagnostic plots
perturbed_by_reduction_plot <- view_output(combined_seurat, "Perturbed by reduction", "orig.ident", PBMC = view_PBMC_markers)
metrics_plot <- perturbed_by_reduction_plot$metrics # 1000 x 480
metrics_plot
add_damage <- function(
data,
damage_fraction = 0.2,
beta_proportion = 0.5,
damage_distribution_shapes = c(a1 = 3, b1 = 12, a2 = 12, b2 = 3),
damage_scale_factor = 0.15,
organism = "human",
output_format = "Seurat",
generate_plots = FALSE,
view_PBMC_markers = FALSE,
project_name = "DamageSimulation",
save_path = "./"
) {
# Reproducibility
set.seed(42)
# Identify input data type and prepare accordingly
if (class(data) == "Seurat"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data@assays$RNA$counts)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data@assays$RNA$counts), damaged_cell_number)
# Isolate into two matrices
to_be_perturbed <- subset(data, cells = damaged_cell_selections)
to_be_perturbed <- as.matrix(to_be_perturbed@assays$RNA$counts)
unperturbed <- subset(data, cells = setdiff(colnames(data), damaged_cell_selections))
unperturbed <- as.matrix(unperturbed@assays$RNA$counts)
}
if (class(data) == "matrix"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data), damaged_cell_number)
# Isolate into two matrices
to_be_perturbed <- data[, damaged_cell_selections]
unperturbed <- data[, setdiff(colnames(data), damaged_cell_selections)]
}
if (class(data) == "SingleCellExperiment"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data), damaged_cell_number)
# Isolate into two matrices
counts_matrix <- data@assays@data$counts
colnames(counts_matrix) <- colnames(data)
rownames(counts_matrix) <- rownames(data)
to_be_perturbed <- counts_matrix[, damaged_cell_selections]
unperturbed_cells <- setdiff(colnames(data), damaged_cell_selections)
unperturbed <- counts_matrix[, unperturbed_cells]
# CHECKS :
# dim(to_be_perturbed)[2] == length(damaged_cell_selections)
# dim(unperturbed)[2] == length(unperturbed_cells)
}
# Step 2: Generate damage scaling values
# Using two beta distributions (two distinct populations, outcome of exponential relationship between. damage level (x) and physical manifestation of damage (y)) i.e. once a threshold is reached damage becomes 'visible'
high_count <- round(damaged_cell_number * beta_proportion)
low_count <- damaged_cell_number - high_count # Ensure proportion maintained
# Draw damage_levels from the distribution given it satisfies the constraints
if (length(damage_distribution_shapes) == 4) {
# Check the shape parameters satisfy the target distribution
unimodal_constraint <- (damage_distribution_shapes[["a1"]] > 1) &
(damage_distribution_shapes[["b1"]] > 1) &
(damage_distribution_shapes[["a2"]] > 1) &
(damage_distribution_shapes[["b2"]] > 1)
bimodal_constraint <- (damage_distribution_shapes[["a1"]] < damage_distribution_shapes[["b1"]]) &
(damage_distribution_shapes[["a2"]] > damage_distribution_shapes[["b2"]])
if (unimodal_constraint & bimodal_constraint){
# Generate the values for the distribution
low_scaling <- rbeta(low_count, shape1 = damage_distribution_shapes[["a1"]], shape2 = damage_distribution_shapes[["b1"]])
high_scaling <- rbeta(high_count, shape1 = damage_distribution_shapes[["a2"]], shape2 = damage_distribution_shapes[["b2"]])
damage_levels <- c(low_scaling, high_scaling)
#damaged_cell_number == length(damage_levels) # TRUE
} else {
stop("Please ensure damage_distribution_shapes satisfy constraints.")
}
} else {
stop("Please ensure damage_distribution_shapes has 4 entries.")
}
# Step 3: Perform perturbation
# Retrieve mitochondrial data
if (organism == "human"){
mito_genes <- get("human_mito_genes", envir = asNamespace("damagesimulator"))
} else if (organism == "mouse") {
mito_genes <- get("mouse_mito_genes", envir = asNamespace("damagesimulator"))
}
# Identify non-mitochondrial genes (these expression values will be altered)
mito_idx <- rownames(to_be_perturbed) %in% mito_genes
non_mito_idx <- which(!mito_idx)
# Extract mitochondrial and non-mitochondrial expression separately
to_be_perturbed_non_mito <- to_be_perturbed[non_mito_idx, , drop = FALSE]
#to_be_perturbed_mito <- to_be_perturbed[mito_idx, , drop = FALSE]
# Define a lambda constant for scaling the damage levels (adjustable value)
lambda <- damage_scale_factor  # Smaller lambda leads to less reduction
# Generate a single perturbation factor per cell based on damage level, adjusted with lambda
perturb_factors <- exp(-lambda * damage_levels)
# Expand perturb_factors to match non-mito gene matrix dimensions
perturb_factors_matrix <- matrix(rep(perturb_factors, each = nrow(to_be_perturbed_non_mito)),
nrow = nrow(to_be_perturbed_non_mito),
ncol = damaged_cell_number,
byrow = FALSE)
perturb_factors_matrix <- matrix(perturb_factors,
nrow = nrow(to_be_perturbed_non_mito),
ncol = length(perturb_factors),
byrow = TRUE)
# Apply the same reduction factor across all non-mito genes for each cell
perturbed_expression <- to_be_perturbed_non_mito * perturb_factors_matrix
# No change to mitochondrial counts
perturbed_combined <- as.matrix(to_be_perturbed) # identical(colnames(perturbed_combined), damaged_cell_selections) # TRUE
perturbed_combined[non_mito_idx, ] <- perturbed_expression
# Step 4: Recombine with unperturbed data
combined_matrix <- cbind(perturbed_combined, as.matrix(unperturbed))
combined_matrix <- combined_matrix[rownames(unperturbed), ]
combined_matrix <- as(combined_matrix, "dgCMatrix") # Essential for speed in view_output!
combined_seurat <- CreateSeuratObject(counts = combined_matrix, assay = "RNA")
# Adding metadata
combined_seurat$orig.ident <- ifelse(rownames(combined_seurat@meta.data) %in% damaged_cell_selections, "damaged", "cell")
if (organism == "human"){
# Mitochondrial percent
m_genes <- rownames(combined_seurat)[grep("^MT-", rownames(combined_seurat))]
combined_seurat$mt.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(m_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
# Ribosomal percent
rb_genes <- rownames(combined_seurat)[grep("^RP[SL]", rownames(combined_seurat))]
combined_seurat$rb.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(rb_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
}
if (organism == "mouse"){
# Mitochondrial percent
true_mito_genes <- mito_genes[grepl("^mt-", mito_genes)] # isolate mito genes from nuclear localised genes
combined_seurat$mt.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(true_mito_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
# Ribosomal percent
rb_genes <- rownames(combined_seurat)[grep("^RP[SL]",  rownames(combined_seurat), ignore.case = TRUE)]
combined_seurat$rb.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(rb_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
}
# Call helper function to generate diagnostic plots
perturbed_by_reduction_plot <- view_output(combined_seurat, "Perturbed by reduction", "orig.ident", PBMC = view_PBMC_markers)
metrics_plot <- perturbed_by_reduction_plot$metrics # 1000 x 480
cluster_plot <- perturbed_by_reduction_plot$clusters # 800 x 380
if (generate_plots == TRUE & is.na(save_path)) {
stop("Please give save_path.")
}
if (generate_plots){
ggsave(
filename = file.path(save_path, paste0(project_name, "_metrics.png")),
plot = metrics_plot,
width = 3000, height = 1480, units = "px"
)
ggsave(
filename = file.path(save_path, paste0(project_name, "_clusters.png")),
plot = cluster_plot,
width = 2400, height = 1100, units = "px"
)
}
# Save the data ----
if (!is.na(output_format)) {
if (!output_format %in% c("Seurat", "SingleCellExperiment", "matrix")) {
stop("Please ensure output_format is one of 'Seurat', 'SingleCellExperiment' or 'matrix'.")
}
} else {
# If no final data type is specified, use the same that was used as input
output_format <- class(data)[[1]]
}
# How to treat each type of output data
if (output_format == "Seurat") {
output <- combined_seurat
}
if (output_format == "matrix") {
# Extract & return matrix from Seurat
output <- as.matrix(combined_seurat@assays$RNA$counts)
}
if (output_format == "SingleCellExperiment") {
# Convert to sce
counts <- combined_seurat@assays$RNA
sce <- SingleCellExperiment(list(counts = counts))
rowData(sce)$featureType <- rownames(combined_seurat@assays$RNA)
colData(sce)$subsets_mito_percent <- combined_seurat$mt.percent
mainExpName(sce) <- 'gene'
colData(sce)$detected <- combined_seurat$nFeature_RNA
output <- sce
}
return(output)
}
damaged_PBMC_0.1 <- add_damage(
data = data,
damage_fraction = 0.5,
organism = "human",
output_format = "Seurat",
generate_plots = TRUE,
view_PBMC_markers = TRUE,
project_name = "test_data_0.1",
save_path = "~/Projects/ReviewArticle/"
)
add_damage <- function(
data,
damage_fraction = 0.2,
beta_proportion = 0.5,
damage_distribution_shapes = c(a1 = 3, b1 = 12, a2 = 12, b2 = 3),
damage_scale_factor = 0.15,
organism = "human",
output_format = "Seurat",
generate_plots = FALSE,
view_PBMC_markers = FALSE,
project_name = "DamageSimulation",
save_path = "./"
) {
# Reproducibility
set.seed(42)
# Identify input data type and prepare accordingly
if (class(data) == "Seurat"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data@assays$RNA$counts)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data@assays$RNA$counts), damaged_cell_number)
# Isolate into two matrices
to_be_perturbed <- subset(data, cells = damaged_cell_selections)
to_be_perturbed <- as.matrix(to_be_perturbed@assays$RNA$counts)
unperturbed <- subset(data, cells = setdiff(colnames(data), damaged_cell_selections))
unperturbed <- as.matrix(unperturbed@assays$RNA$counts)
}
if (class(data) == "matrix"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data), damaged_cell_number)
# Isolate into two matrices
to_be_perturbed <- data[, damaged_cell_selections]
unperturbed <- data[, setdiff(colnames(data), damaged_cell_selections)]
}
if (class(data) == "SingleCellExperiment"){
# Step 1: Select cells to perturb
total_cell_number <- ncol(data)
damaged_cell_number <- round(damage_fraction * total_cell_number)
damaged_cell_selections <- sample(colnames(data), damaged_cell_number)
# Isolate into two matrices
counts_matrix <- data@assays@data$counts
colnames(counts_matrix) <- colnames(data)
rownames(counts_matrix) <- rownames(data)
to_be_perturbed <- counts_matrix[, damaged_cell_selections]
unperturbed_cells <- setdiff(colnames(data), damaged_cell_selections)
unperturbed <- counts_matrix[, unperturbed_cells]
# CHECKS :
# dim(to_be_perturbed)[2] == length(damaged_cell_selections)
# dim(unperturbed)[2] == length(unperturbed_cells)
}
# Step 2: Generate damage scaling values
# Using two beta distributions (two distinct populations, outcome of exponential relationship between. damage level (x) and physical manifestation of damage (y)) i.e. once a threshold is reached damage becomes 'visible'
high_count <- round(damaged_cell_number * beta_proportion)
low_count <- damaged_cell_number - high_count # Ensure proportion maintained
# Draw damage_levels from the distribution given it satisfies the constraints
if (length(damage_distribution_shapes) == 4) {
# Check the shape parameters satisfy the target distribution
unimodal_constraint <- (damage_distribution_shapes[["a1"]] > 1) &
(damage_distribution_shapes[["b1"]] > 1) &
(damage_distribution_shapes[["a2"]] > 1) &
(damage_distribution_shapes[["b2"]] > 1)
bimodal_constraint <- (damage_distribution_shapes[["a1"]] < damage_distribution_shapes[["b1"]]) &
(damage_distribution_shapes[["a2"]] > damage_distribution_shapes[["b2"]])
if (unimodal_constraint & bimodal_constraint){
# Generate the values for the distribution
low_scaling <- rbeta(low_count, shape1 = damage_distribution_shapes[["a1"]], shape2 = damage_distribution_shapes[["b1"]])
high_scaling <- rbeta(high_count, shape1 = damage_distribution_shapes[["a2"]], shape2 = damage_distribution_shapes[["b2"]])
damage_levels <- c(low_scaling, high_scaling)
#damaged_cell_number == length(damage_levels) # TRUE
} else {
stop("Please ensure damage_distribution_shapes satisfy constraints.")
}
} else {
stop("Please ensure damage_distribution_shapes has 4 entries.")
}
# Step 3: Perform perturbation
# Retrieve mitochondrial data
if (organism == "human"){
mito_genes <- get("human_mito_genes", envir = asNamespace("damagesimulator"))
} else if (organism == "mouse") {
mito_genes <- get("mouse_mito_genes", envir = asNamespace("damagesimulator"))
}
# Identify non-mitochondrial genes (these expression values will be altered)
mito_idx <- rownames(to_be_perturbed) %in% mito_genes
non_mito_idx <- which(!mito_idx)
# Extract mitochondrial and non-mitochondrial expression separately
to_be_perturbed_non_mito <- to_be_perturbed[non_mito_idx, , drop = FALSE]
#to_be_perturbed_mito <- to_be_perturbed[mito_idx, , drop = FALSE]
# Define a lambda constant for scaling the damage levels (adjustable value)
lambda <- damage_scale_factor  # Smaller lambda leads to less reduction
# Generate a single perturbation factor per cell based on damage level, adjusted with lambda
perturb_factors <- exp(-lambda * damage_levels)
# Expand perturb_factors to match non-mito gene matrix dimensions
perturb_factors_matrix <- matrix(rep(perturb_factors, each = nrow(to_be_perturbed_non_mito)),
nrow = nrow(to_be_perturbed_non_mito),
ncol = damaged_cell_number,
byrow = FALSE)
perturb_factors_matrix <- matrix(perturb_factors,
nrow = nrow(to_be_perturbed_non_mito),
ncol = length(perturb_factors),
byrow = TRUE)
# Apply the same reduction factor across all non-mito genes for each cell
perturbed_expression <- to_be_perturbed_non_mito * perturb_factors_matrix
# No change to mitochondrial counts
perturbed_combined <- as.matrix(to_be_perturbed) # identical(colnames(perturbed_combined), damaged_cell_selections) # TRUE
perturbed_combined[non_mito_idx, ] <- perturbed_expression
# Step 4: Recombine with unperturbed data
combined_matrix <- cbind(perturbed_combined, as.matrix(unperturbed))
combined_matrix <- combined_matrix[rownames(unperturbed), ]
combined_matrix <- as(combined_matrix, "dgCMatrix") # Essential for speed in view_output!
combined_seurat <- CreateSeuratObject(counts = combined_matrix, assay = "RNA")
# Adding metadata
combined_seurat$orig.ident <- ifelse(rownames(combined_seurat@meta.data) %in% damaged_cell_selections, "damaged", "cell")
if (organism == "human"){
# Mitochondrial percent
m_genes <- rownames(combined_seurat)[grep("^MT-", rownames(combined_seurat))]
combined_seurat$mt.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(m_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
# Ribosomal percent
rb_genes <- rownames(combined_seurat)[grep("^RP[SL]", rownames(combined_seurat))]
combined_seurat$rb.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(rb_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
}
if (organism == "mouse"){
# Mitochondrial percent
true_mito_genes <- mito_genes[grepl("^mt-", mito_genes)] # isolate mito genes from nuclear localised genes
combined_seurat$mt.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(true_mito_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
# Ribosomal percent
rb_genes <- rownames(combined_seurat)[grep("^RP[SL]",  rownames(combined_seurat), ignore.case = TRUE)]
combined_seurat$rb.percent <- PercentageFeatureSet(
object = combined_seurat,
features = intersect(rb_genes, rownames(combined_seurat@assays$RNA)),
assay = "RNA"
)
}
# Call helper function to generate diagnostic plots
perturbed_by_reduction_plot <- view_output(combined_seurat, "Perturbed by reduction", "orig.ident", PBMC = view_PBMC_markers)
metrics_plot <- perturbed_by_reduction_plot$metrics # 1000 x 480
cluster_plot <- perturbed_by_reduction_plot$clusters # 800 x 380
if (generate_plots == TRUE & is.na(save_path)) {
stop("Please give save_path.")
}
if (generate_plots){
ggsave(
filename = file.path(save_path, paste0(project_name, "_metrics.png")),
plot = metrics_plot,
width = 3000, height = 1480, units = "px"
)
ggsave(
filename = file.path(save_path, paste0(project_name, "_clusters.png")),
plot = cluster_plot,
width = 2400, height = 1100, units = "px"
)
}
# Save the data ----
if (!is.na(output_format)) {
if (!output_format %in% c("Seurat", "SingleCellExperiment", "matrix")) {
stop("Please ensure output_format is one of 'Seurat', 'SingleCellExperiment' or 'matrix'.")
}
} else {
# If no final data type is specified, use the same that was used as input
output_format <- class(data)[[1]]
}
# How to treat each type of output data
if (output_format == "Seurat") {
output <- combined_seurat
}
if (output_format == "matrix") {
# Extract & return matrix from Seurat
output <- as.matrix(combined_seurat@assays$RNA$counts)
}
if (output_format == "SingleCellExperiment") {
# Convert to sce
counts <- combined_seurat@assays$RNA
sce <- SingleCellExperiment(list(counts = counts))
rowData(sce)$featureType <- rownames(combined_seurat@assays$RNA)
colData(sce)$subsets_mito_percent <- combined_seurat$mt.percent
mainExpName(sce) <- 'gene'
colData(sce)$detected <- combined_seurat$nFeature_RNA
output <- sce
}
return(output)
}
damaged_PBMC_0.5 <- add_damage(
data = data,
damage_fraction = 0.5,
organism = "human",
output_format = "Seurat",
generate_plots = TRUE,
view_PBMC_markers = TRUE,
project_name = "test_data_0.5",
save_path = "~/Projects/ReviewArticle/"
)
